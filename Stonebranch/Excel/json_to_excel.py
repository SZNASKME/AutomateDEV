import json
import pandas as pd
from datetime import datetime
import os

def convert_json_to_excel():
    """‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå TaskInstance01.json ‡πÄ‡∏õ‡πá‡∏ô Excel"""
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
    json_file = 'TaskInstance01.json'
    excel_file = 'TaskInstance01.xlsx'
    
    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {json_file}...")
    
    try:
        with open(json_file, 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        print(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame(data)
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customField1 ‡πÅ‡∏•‡∏∞ customField2
        if 'customField1' in df.columns:
            df['customField1_label'] = df['customField1'].apply(lambda x: x.get('label', '') if isinstance(x, dict) else '')
            df['customField1_value'] = df['customField1'].apply(lambda x: x.get('value', '') if isinstance(x, dict) else '')
            df = df.drop('customField1', axis=1)
        
        if 'customField2' in df.columns:
            df['customField2_label'] = df['customField2'].apply(lambda x: x.get('label', '') if isinstance(x, dict) else '')
            df['customField2_value'] = df['customField2'].apply(lambda x: x.get('value', '') if isinstance(x, dict) else '')
            df = df.drop('customField2', axis=1)
        
        # ‡πÅ‡∏õ‡∏•‡∏á businessServices ‡∏à‡∏≤‡∏Å list ‡πÄ‡∏õ‡πá‡∏ô string
        if 'businessServices' in df.columns:
            df['businessServices'] = df['businessServices'].apply(lambda x: ', '.join(x) if isinstance(x, list) else str(x))
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        important_columns = [
            'name', 'taskName', 'status', 'progress', 'agent', 'credentials',
            'launchTime', 'startTime', 'endTime', 'updatedTime',
            'workflowDefinitionName', 'workflowInstanceName',
            'businessServices', 'customField1_label', 'customField1_value',
            'customField2_label', 'customField2_value'
        ]
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        remaining_columns = [col for col in df.columns if col not in important_columns]
        final_columns = [col for col in important_columns if col in df.columns] + remaining_columns
        df = df[final_columns]
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel...")
        
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Task_Instances', index=False)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            worksheet = writer.sheets['Task_Instances']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # ‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            worksheet.freeze_panes = 'A2'
        
        print(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(df.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå Excel: {excel_file}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        print("\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        if 'status' in df.columns:
            print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:")
            status_counts = df['status'].value_counts()
            for status, count in status_counts.items():
                print(f"  - {status}: {count:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        if 'agent' in df.columns:
            print(f"\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Agent: {df['agent'].nunique()} Agent")
        
        if 'workflowDefinitionName' in df.columns:
            print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Workflow: {df['workflowDefinitionName'].nunique()} Workflow")
            
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {json_file}")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö script ‡∏ô‡∏µ‡πâ")
    except json.JSONDecodeError:
        print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå {json_file} ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Excel...")
    convert_json_to_excel()
    print("\n‚ú® ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î...")